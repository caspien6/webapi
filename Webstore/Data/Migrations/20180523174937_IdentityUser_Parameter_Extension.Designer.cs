// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Webstore.Data.Models;

namespace Webstore.Data.Migrations
{
    [DbContext(typeof(R0ga3cContext))]
    [Migration("20180523174937_IdentityUser_Parameter_Extension")]
    partial class IdentityUser_Parameter_Extension
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Webstore.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Webstore.Data.Models.Kategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int?>("Alkategoria");

                    b.Property<string>("Nev")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Alkategoria");

                    b.ToTable("Kategoria");
                });

            modelBuilder.Entity("Webstore.Data.Models.Kosar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatuszId")
                        .HasColumnName("StatuszID");

                    b.Property<int?>("TelephelyId")
                        .HasColumnName("TelephelyID");

                    b.Property<int?>("VevoId")
                        .HasColumnName("VevoID");

                    b.HasKey("Id");

                    b.HasIndex("StatuszId");

                    b.HasIndex("VevoId");

                    b.ToTable("Kosar");
                });

            modelBuilder.Entity("Webstore.Data.Models.KosarTetel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<double?>("Ar");

                    b.Property<int?>("KosarId")
                        .HasColumnName("KosarID");

                    b.Property<int?>("Mennyiseg");

                    b.Property<int?>("StatuszId")
                        .HasColumnName("StatuszID");

                    b.Property<int?>("TermekId")
                        .HasColumnName("TermekID");

                    b.HasKey("Id");

                    b.HasIndex("KosarId");

                    b.HasIndex("StatuszId");

                    b.HasIndex("TermekId");

                    b.ToTable("KosarTetel");
                });

            modelBuilder.Entity("Webstore.Data.Models.Statusz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Nev")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Statusz");
                });

            modelBuilder.Entity("Webstore.Data.Models.Termek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<double?>("Ar");

                    b.Property<int?>("KategoriaId")
                        .HasColumnName("KategoriaID");

                    b.Property<string>("KepUrl")
                        .HasMaxLength(200);

                    b.Property<string>("Leiras");

                    b.Property<string>("Nev")
                        .HasMaxLength(50);

                    b.Property<int?>("Raktarkeszlet");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("KategoriaId");

                    b.ToTable("Termek");
                });

            modelBuilder.Entity("Webstore.Data.Models.Vevo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdentityId");

                    b.Property<string>("Jelszo")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .HasMaxLength(50);

                    b.Property<string>("Nev")
                        .HasMaxLength(50);

                    b.Property<string>("Szamlaszam")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("Vevo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Webstore.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Webstore.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Webstore.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Webstore.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webstore.Data.Models.Kategoria", b =>
                {
                    b.HasOne("Webstore.Data.Models.Kategoria", "AlkategoriaNavigation")
                        .WithMany("InverseAlkategoriaNavigation")
                        .HasForeignKey("Alkategoria")
                        .HasConstraintName("FK__Kategoria__Szulo__2645B050");
                });

            modelBuilder.Entity("Webstore.Data.Models.Kosar", b =>
                {
                    b.HasOne("Webstore.Data.Models.Statusz", "Statusz")
                        .WithMany("Kosar")
                        .HasForeignKey("StatuszId")
                        .HasConstraintName("FK__Kosar__Statu__339FAB6E");

                    b.HasOne("Webstore.Data.Models.Vevo", "Vevo")
                        .WithMany("Kosar")
                        .HasForeignKey("VevoId")
                        .HasConstraintName("FK_Kosar_Vevo");
                });

            modelBuilder.Entity("Webstore.Data.Models.KosarTetel", b =>
                {
                    b.HasOne("Webstore.Data.Models.Kosar", "Kosar")
                        .WithMany("KosarTetel")
                        .HasForeignKey("KosarId")
                        .HasConstraintName("FK__Kosar__KosarTetel__37703C52");

                    b.HasOne("Webstore.Data.Models.Statusz", "Statusz")
                        .WithMany("KosarTetel")
                        .HasForeignKey("StatuszId")
                        .HasConstraintName("FK__Megrendel__Statu__395884C4");

                    b.HasOne("Webstore.Data.Models.Termek", "Termek")
                        .WithMany("KosarTetel")
                        .HasForeignKey("TermekId")
                        .HasConstraintName("FK__Megrendel__Terme__3864608B");
                });

            modelBuilder.Entity("Webstore.Data.Models.Termek", b =>
                {
                    b.HasOne("Webstore.Data.Models.Kategoria", "Kategoria")
                        .WithMany("Termek")
                        .HasForeignKey("KategoriaId")
                        .HasConstraintName("FK__Termek__Kategori__2A164134");
                });

            modelBuilder.Entity("Webstore.Data.Models.Vevo", b =>
                {
                    b.HasOne("Webstore.Data.ApplicationUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");
                });
#pragma warning restore 612, 618
        }
    }
}
